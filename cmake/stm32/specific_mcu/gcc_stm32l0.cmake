SET(CHIP_C_OPTIONS -g3 -mthumb -fno-builtin -mcpu=cortex-m0 -std=gnu99 -ffunction-sections -fdata-sections -fomit-frame-pointer -mabi=aapcs -fno-unroll-loops -ffast-math -ftree-vectorize)
SET(CHIP_CXX_OPTIONS -g3 -mthumb -fno-builtin -mcpu=cortex-m0 -ffunction-sections -fdata-sections -fomit-frame-pointer -mabi=aapcs -fno-unroll-loops -ffast-math -ftree-vectorize)
SET(CHIP_ASM_OPTIONS -g3 -mthumb -mcpu=cortex-m0 -x assembler-with-cpp)
SET(CHIP_EXE_LINKER_OPTIONS -Wl,--gc-sections -mthumb -mcpu=cortex-m0 -mabi=aapcs)
SET(CHIP_MODULE_LINKER_OPTIONS -mthumb -mcpu=cortex-m0 -mabi=aapcs)
SET(CHIP_SHARED_LINKER_OPTIONS -mthumb -mcpu=cortex-m0 -mabi=aapcs)

FUNCTION(CHIP_GET_OPTIONS_ STM32_CHIP_C_OPTIONS STM32_CHIP_CXX_OPTIONS STM32_CHIP_ASM_OPTIONS STM32_CHIP_EXE_LINKER_OPTIONS STM32_CHIP_MODULE_LINKER_OPTIONS STM32_CHIP_SHARED_LINKER_OPTIONS)
    SET(${STM32_CHIP_C_OPTIONS} ${CHIP_C_OPTIONS} PARENT_SCOPE)
    SET(${STM32_CHIP_CXX_OPTIONS} ${CHIP_CXX_OPTIONS} PARENT_SCOPE)
    SET(${STM32_CHIP_ASM_OPTIONS} ${CHIP_ASM_OPTIONS} PARENT_SCOPE)
    SET(${STM32_CHIP_EXE_LINKER_OPTIONS} ${CHIP_EXE_LINKER_OPTIONS} PARENT_SCOPE)
    SET(${STM32_CHIP_MODULE_LINKER_OPTIONS} ${CHIP_MODULE_LINKER_OPTIONS} PARENT_SCOPE)
    SET(${STM32_CHIP_SHARED_LINKER_OPTIONS} ${CHIP_SHARED_LINKER_OPTIONS} PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(CHIP_GET_TYPES_ STM32_CHIP_TYPES)
    SET(${STM32_CHIP_TYPES} 011xx 021xx 031xx 041xx 051xx 052xx 053xx 061xx 062xx 063xx 071xx 072xx 073xx 081xx 082xx 083xx PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(CHIP_GET_CODES_ CODES)
    SET(${CODES} "011.[34]" "021.4" "031.[46]" "041.6" "051.[68]" "052.[68]" "053.[68]" "061.8" "062.8" "063.8" "071.[BZ]" "072.[BZ]" "073.[8BZ]" "081.Z" "082.[BZ]" "083.[8BZ]" PARENT_SCOPE)
ENDFUNCTION()
#OUT -> STM32_CODE
FUNCTION(CHIP_GET_CURRENT_CODE_ MCU STM32_CODE)
    STRING(REGEX REPLACE "^[sS][tT][mM]32[lL]((011.[34])|(021.4)|(031.[46])|(041.6)|(05[123].[68])|(06[123].8)|(07[123].[8BZ])|(08[123].[8BZ])).+$" "\\1" STM32_CODE_ ${MCU})
    SET(${STM32_CODE} ${STM32_CODE_} PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(CHIP_GET_TYPE_ MCU CHIP_TYPE)
    CHIP_GET_CODES_(STM32_CODES)
    CHIP_GET_CURRENT_CODE_(${MCU} STM32_CODE)
    SET(INDEX 0)
    CHIP_GET_TYPES_(STM32_CHIP_TYPES)
    FOREACH(C_TYPE ${STM32_CHIP_TYPES})
        LIST(GET STM32_CODES ${INDEX} CHIP_TYPE_REGEXP)
        IF(STM32_CODE MATCHES ${CHIP_TYPE_REGEXP})
            SET(RESULT_TYPE ${C_TYPE})
        ENDIF()
        MATH(EXPR INDEX "${INDEX}+1")
    ENDFOREACH()
    SET(${CHIP_TYPE} ${RESULT_TYPE} PARENT_SCOPE)
ENDFUNCTION()


FUNCTION(CHIP_GET_PARAMETERS_ MCU FLASH_SIZE RAM_SIZE CCRAM_SIZE)
    STRING(REGEX REPLACE "^[sS][tT][mM]32[lL]0[12345678][123].([3468BZ])" "\\1" STM32_SIZE_CODE ${MCU})
    IF(STM32_SIZE_CODE STREQUAL "3")
        SET(FLASH "8K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "4")
        SET(FLASH "16K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "6")
        SET(FLASH "32K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "8")
        SET(FLASH "64K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "B")
        SET(FLASH "128K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "Z")
        SET(FLASH "192K")
    ENDIF()

    CHIP_GET_TYPE_(${MCU} TYPE)
    
    IF(${TYPE} STREQUAL 011xx)
        SET(RAM "2K")
    ELSEIF(${TYPE} STREQUAL 021xx)
        SET(RAM "2K")
    ELSEIF(${TYPE} STREQUAL 031xx)
        SET(RAM "8K")
    ELSEIF(${TYPE} STREQUAL 041xx)
        SET(RAM "8K")
    ELSEIF(${TYPE} STREQUAL 051xx)
        SET(RAM "8K")
    ELSEIF(${TYPE} STREQUAL 052xx)
        SET(RAM "8K")
    ELSEIF(${TYPE} STREQUAL 053xx)
        SET(RAM "8K")
    ELSEIF(${TYPE} STREQUAL 061xx)
        SET(RAM "8K")
    ELSEIF(${TYPE} STREQUAL 062xx)
        SET(RAM "8K")
    ELSEIF(${TYPE} STREQUAL 063xx)
        SET(RAM "8K")
    ELSEIF(${TYPE} STREQUAL 071xx)
        SET(RAM "20K")
    ELSEIF(${TYPE} STREQUAL 072xx)
        SET(RAM "20K")
    ELSEIF(${TYPE} STREQUAL 073xx)
        SET(RAM "20K")
    ELSEIF(${TYPE} STREQUAL 081xx)
        SET(RAM "20K")
    ELSEIF(${TYPE} STREQUAL 082xx)
        SET(RAM "20K")
    ELSEIF(${TYPE} STREQUAL 083xx)
        SET(RAM "20K")
    ENDIF()

    SET(${FLASH_SIZE} ${FLASH} PARENT_SCOPE)
    SET(${RAM_SIZE} ${RAM} PARENT_SCOPE)
    SET(${CCRAM_SIZE} "0K" PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(CHIP_SET_DEFINITIONS_ TARGET MCU)
    CHIP_GET_TYPE_(${MCU} CHIP_TYPE)
    CHIP_GET_TYPES_(STM32_CHIP_TYPES)
    LIST(FIND STM32_CHIP_TYPES ${CHIP_TYPE} TYPE_INDEX)
    IF(TYPE_INDEX EQUAL -1)
        MESSAGE(FATAL_ERROR "Invalid/unsupported STM32L0 chip type: ${CHIP_TYPE}")
    ENDIF()
    GET_TARGET_PROPERTY(TARGET_DEFS ${TARGET} COMPILE_DEFINITIONS)
    IF(TARGET_DEFS)
        SET(TARGET_DEFS "STM32L0;STM32L${CHIP_TYPE};${TARGET_DEFS}")
    ELSE()
        SET(TARGET_DEFS "STM32L0;STM32L${CHIP_TYPE}")
    ENDIF()
    SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_DEFINITIONS "${TARGET_DEFS}")
ENDFUNCTION()
