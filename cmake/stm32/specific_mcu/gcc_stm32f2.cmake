SET(CHIP_C_OPTIONS -g3 -mthumb -fno-builtin -mcpu=cortex-m3 -std=gnu99 -ffunction-sections -fdata-sections -fomit-frame-pointer -mabi=aapcs -fno-unroll-loops -ffast-math -ftree-vectorize)
SET(CHIP_CXX_OPTIONS -g3 -mthumb -fno-builtin -mcpu=cortex-m3 -std=c++11 -ffunction-sections -fdata-sections -fomit-frame-pointer -mabi=aapcs -fno-unroll-loops -ffast-math -ftree-vectorize)
SET(CHIP_ASM_OPTIONS -g3 -mthumb -mcpu=cortex-m3 -x assembler-with-cpp)
SET(CHIP_EXE_LINKER_OPTIONS -Wl,--gc-sections -mthumb -mcpu=cortex-m3 -mabi=aapcs)
SET(CHIP_MODULE_LINKER_OPTIONS -mthumb -mcpu=cortex-m3 -mabi=aapcs)
SET(CHIP_SHARED_LINKER_OPTIONS -mthumb -mcpu=cortex-m3 -mabi=aapcs)

FUNCTION(CHIP_GET_OPTIONS_ STM32_CHIP_C_OPTIONS STM32_CHIP_CXX_OPTIONS STM32_CHIP_ASM_OPTIONS STM32_CHIP_EXE_LINKER_OPTIONS STM32_CHIP_MODULE_LINKER_OPTIONS STM32_CHIP_SHARED_LINKER_OPTIONS)
    SET(${STM32_CHIP_C_OPTIONS} ${CHIP_C_OPTIONS} PARENT_SCOPE)
    SET(${STM32_CHIP_CXX_OPTIONS} ${CHIP_CXX_OPTIONS} PARENT_SCOPE)
    SET(${STM32_CHIP_ASM_OPTIONS} ${CHIP_ASM_OPTIONS} PARENT_SCOPE)
    SET(${STM32_CHIP_EXE_LINKER_OPTIONS} ${CHIP_EXE_LINKER_OPTIONS} PARENT_SCOPE)
    SET(${STM32_CHIP_MODULE_LINKER_OPTIONS} ${CHIP_MODULE_LINKER_OPTIONS} PARENT_SCOPE)
    SET(${STM32_CHIP_SHARED_LINKER_OPTIONS} ${CHIP_SHARED_LINKER_OPTIONS} PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(CHIP_GET_TYPES_ STM32_CHIP_TYPES)
    SET(${STM32_CHIP_TYPES} 205xB 205xC 205xE 205xF 205xG 215xE 215xG 207xC 207xE 207xF 207xG 217xE 217xG PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(CHIP_GET_CODES_ CODES)
    SET(${CODES} "205.B" "205.C" "205.E" "205.F" "205.G" "215.E" "215.G" "207.C" "207.E" "207.F" "207.G" "217.E" "217.G" PARENT_SCOPE)
ENDFUNCTION()
#OUT -> STM32_CODE
FUNCTION(CHIP_GET_CURRENT_CODE_ MCU STM32_CODE)
    STRING(REGEX REPLACE "^[sS][tT][mM]32[fF](2[01][57].[BCDEFG]).*$" "\\1" STM32_CODE_ ${MCU})
    SET(${STM32_CODE} ${STM32_CODE_} PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(CHIP_GET_TYPE_ MCU CHIP_TYPE)
    CHIP_GET_CODES_(STM32_CODES)
    CHIP_GET_CURRENT_CODE_(${MCU} STM32_CODE)
    SET(INDEX 0)
    CHIP_GET_TYPES_(STM32_CHIP_TYPES)
    FOREACH(C_TYPE ${STM32_CHIP_TYPES})
        LIST(GET STM32_CODES ${INDEX} CHIP_TYPE_REGEXP)
        IF(STM32_CODE MATCHES ${CHIP_TYPE_REGEXP})
            SET(RESULT_TYPE ${C_TYPE})
        ENDIF()
        MATH(EXPR INDEX "${INDEX}+1")
    ENDFOREACH()
    SET(${CHIP_TYPE} ${RESULT_TYPE} PARENT_SCOPE)
ENDFUNCTION()


FUNCTION(CHIP_GET_PARAMETERS_ MCU FLASH_SIZE RAM_SIZE CCRAM_SIZE)
    STRING(REGEX REPLACE "^[sS][tT][mM]32[fF]2[01][57].([BCDEFG]).*$" "\\1" STM32_SIZE_CODE ${MCU})
    IF(STM32_SIZE_CODE STREQUAL "B")
        SET(FLASH "128K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "C")
        SET(FLASH "256K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "D")
        SET(FLASH "384K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "E")
        SET(FLASH "512K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "F")
        SET(FLASH "768K")
    ELSEIF(STM32_SIZE_CODE STREQUAL "G")
        SET(FLASH "1024K")
    ENDIF()

    CHIP_GET_TYPE_(${MCU} TYPE)

    SET(RAM "128K")

    IF(${TYPE} STREQUAL 205xC)
        SET(RAM "96K")
    ELSEIF(${TYPE} STREQUAL 205xB)
        SET(RAM "64K")
    ENDIF()

    SET(${FLASH_SIZE} ${FLASH} PARENT_SCOPE)
    SET(${RAM_SIZE} ${RAM} PARENT_SCOPE)
    SET(${CCRAM_SIZE} "0K" PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(CHIP_SET_DEFINITIONS_ TARGET MCU)
    CHIP_GET_TYPE_(${MCU} CHIP_TYPE)
    CHIP_GET_TYPES_(STM32_CHIP_TYPES)
    LIST(FIND STM32_CHIP_TYPES ${CHIP_TYPE} TYPE_INDEX)
    IF(TYPE_INDEX EQUAL -1)
        MESSAGE(FATAL_ERROR "Invalid/unsupported STM32F2 chip type: ${CHIP_TYPE}")
    ENDIF()

    STRING(REGEX REPLACE "^(2[01][57]).[BCDEFG]" "\\1" DEVICE_NUM ${CHIP_TYPE})

    GET_TARGET_PROPERTY(TARGET_DEFS ${TARGET} COMPILE_DEFINITIONS)
    IF(TARGET_DEFS)
        SET(TARGET_DEFS "STM32F2;STM32F${DEVICE_NUM}xx;${TARGET_DEFS}")
    ELSE()
        SET(TARGET_DEFS "STM32F2;STM32F${DEVICE_NUM}xx")
    ENDIF()
    SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_DEFINITIONS "${TARGET_DEFS}")
ENDFUNCTION()
